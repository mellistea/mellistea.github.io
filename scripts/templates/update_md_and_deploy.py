# scripts/update_md_and_deploy.py

import os
import re
import subprocess
import frontmatter
from datetime import datetime
from pathlib import Path
from unidecode import unidecode

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
GIT_NAME = "–∏–º—è"
GIT_EMAIL = "–∏–º–µ–π–ª"
REPO_URL = "https://—Ç–æ–∫–µ–Ω@github.com/mellistea/mellistea.github.io.git"
COMMIT_MSG = "–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–Ω—Ñ–∏–∫–æ–≤"
SOURCE_ROOT = Path(r"D:\Dropbox\obsidian\memo\Fic\–ó–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ")
PROJECT_ROOT = Path(__file__).resolve().parent.parent
POSTS_DIR = PROJECT_ROOT / "_posts"

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def run(cmd, allow_fail=False):
    result = subprocess.run(cmd, cwd=PROJECT_ROOT, shell=True, capture_output=True, text=True)
    print(f"\n>>> {cmd}")
    if result.stdout: print(result.stdout)
    if result.stderr: print(result.stderr)
    if result.returncode != 0 and not allow_fail:
        raise Exception(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {cmd}")
    return result

def transliterate(text):
    return re.sub(r"[^\w\-]", "-", unidecode(text)).strip("-")

def get_file_info(path: Path):
    stat = path.stat()
    return int(stat.st_mtime), stat.st_size

# ========== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==========
def update_posts():
    print(f"\nüîç –ò—â–µ–º —Ñ–∞–π–ª—ã —Å ü™∂ –≤: {SOURCE_ROOT}\n")

    for dirpath, _, filenames in os.walk(SOURCE_ROOT):
        for fname in filenames:
            if "ü™∂" not in fname or not fname.endswith(".md"):
                continue

            source_path = Path(dirpath) / fname
            print(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {source_path}")

            try:
                post = frontmatter.load(source_path)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è frontmatter: {e}")
                continue

            date_str = post.get("date")
            title = post.get("title")

            if not date_str or not title:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {fname}: –Ω–µ—Ç –ø–æ–ª—è date –∏–ª–∏ title")
                continue

            try:
                date = datetime.strptime(date_str[:10], "%Y-%m-%d").date()
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ {fname}: {e}")
                continue

            translit_title = transliterate(title)
            new_filename = f"{date}-{translit_title}.md"
            dest_path = POSTS_DIR / new_filename

            src_mtime, src_size = get_file_info(source_path)
            if dest_path.exists():
                dst_mtime, dst_size = get_file_info(dest_path)
                if src_mtime == dst_mtime and src_size == dst_size:
                    print(f"‚úÖ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {new_filename}")
                    continue
                else:
                    print(f"üìù –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è: {new_filename}")
            else:
                print(f"üÜï –ù–æ–≤—ã–π —Ñ–∞–π–ª: {new_filename}")

            post["layout"] = "story"
            with open(dest_path, "w", encoding="utf-8") as f:
                f.write(frontmatter.dumps(post))
            os.utime(dest_path, (src_mtime, src_mtime))

def deploy():
    run(f'git config user.name "{GIT_NAME}"')
    run(f'git config user.email "{GIT_EMAIL}"')

    if not (PROJECT_ROOT / ".git").exists():
        run("git init")
        run(f"git remote add origin {REPO_URL}")
    else:
        run(f"git remote set-url origin {REPO_URL}")

    run("git add .")
    status = run("git status --porcelain", allow_fail=True)

    if status.stdout.strip():
        run(f'git commit -m "{COMMIT_MSG}"')
    else:
        print("üö´ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –∫–æ–º–º–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")

    run("git branch -M main")
    run("git push -u origin main --force")

if __name__ == "__main__":
    update_posts()
    deploy()
    input("\n‚úîÔ∏è –ì–æ—Ç–æ–≤–æ. –ù–∞–∂–º–∏ Enter, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ...")
